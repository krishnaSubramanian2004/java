public class ThreadComparison {

    // Inner class for Thread 1
    public static class Thread1 extends Thread {
        private long startTime;
        private long sleepTime;
        private long waitTime;

        public Thread1(long sleepTime, long waitTime) {
            this.sleepTime = sleepTime;
            this.waitTime = waitTime;
        }

        @Override
        public void run() {
            try {
                startTime = System.currentTimeMillis();
                System.out.println("Thread1 started.");

                // Simulate work with sleep
                Thread.sleep(sleepTime);
                System.out.println("Thread1 woke up after sleeping for " + sleepTime + " milliseconds.");

                synchronized (this) {
                    wait(waitTime);
                }
                System.out.println("Thread1 finished waiting for " + waitTime + " milliseconds.");

                long endTime = System.currentTimeMillis();
                System.out.println("Thread1 total time: " + (endTime - startTime) + " milliseconds.");

            } catch (InterruptedException e) {
                System.out.println("Thread1 was interrupted.");
            }
        }
    }

    // Inner class for Thread 2
    public static class Thread2 extends Thread {
        private long startTime;
        private long sleepTime;
        private long waitTime;

        public Thread2(long sleepTime, long waitTime) {
            this.sleepTime = sleepTime;
            this.waitTime = waitTime;
        }

        @Override
        public void run() {
            try {
                startTime = System.currentTimeMillis();
                System.out.println("Thread2 started.");

                // Simulate work with sleep
                Thread.sleep(sleepTime);
                System.out.println("Thread2 woke up after sleeping for " + sleepTime + " milliseconds.");

                synchronized (this) {
                    wait(waitTime);
                }
                System.out.println("Thread2 finished waiting for " + waitTime + " milliseconds.");

                long endTime = System.currentTimeMillis();
                System.out.println("Thread2 total time: " + (endTime - startTime) + " milliseconds.");

            } catch (InterruptedException e) {
                System.out.println("Thread2 was interrupted.");
            }
        }
    }

    public static void main(String[] args) {
        // Define sleep and wait times for both threads
        long sleepTimeThread1 = 2000; // 2 seconds
        long waitTimeThread1 = 3000;  // 3 seconds

        long sleepTimeThread2 = 1500; // 1.5 seconds
        long waitTimeThread2 = 4000;  // 4 seconds

        // Create thread instances
        Thread1 t1 = new Thread1(sleepTimeThread1, waitTimeThread1);
        Thread2 t2 = new Thread2(sleepTimeThread2, waitTimeThread2);

        // Start threads
        t1.start();
        t2.start();

        try {
            // Wait for both threads to complete
            t1.join();
            t2.join();

            // Compare the total time of both threads
            long totalTimeThread1 = t1.getEndTime() - t1.getStartTime();
            long totalTimeThread2 = t2.getEndTime() - t2.getStartTime();

            if (totalTimeThread1 > totalTimeThread2) {
                System.out.println("Thread1 has a longer total time.");
            } else if (totalTimeThread1 < totalTimeThread2) {
                System.out.println("Thread2 has a longer total time.");
            } else {
                System.out.println("Both threads have the same total time.");
            }

        } catch (InterruptedException e) {
            System.out.println("Main thread was interrupted.");
        }
    }
}
output
Thread1 started.
Thread2 started.
Thread2 woke up after sleeping for 1500 milliseconds.
Thread2 finished waiting for 4000 milliseconds.
Thread2 total time: [time] milliseconds.
Thread1 woke up after sleeping for 2000 milliseconds.
Thread1 finished waiting for 3000 milliseconds.
Thread1 total time: [time] milliseconds.
Thread1 has a longer total time.
